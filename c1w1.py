# def factorial(n):
#   if n == 0:
#     return 1
#   else:
#     return n * factorial(n - 1)
# print(factorial(5))

def PatternCount(Text, Pattern):
  count = 0
  itr = len(Text) - len(Pattern) + 1
  for i in range(itr):
    if Text[i: i+len(Pattern)] == Pattern:
      count=count+1  
  return count

# print(PatternCount('GACTCATCCGTGCGCAAGTCTAAGTAACTCTGAAATCTGAAACAGTCTGAAACGCGCATCTGAAAGAACTTCTGAAAGTCTGAAAGTCTGAAAAGTCTGAAATCTGAAAAGCACGGTCTGAAAACGGACTCTGAAAGTCTGAAAAAATTCTGAAATCTGAAATCTGAAAATGGCCGTCTGAAATCTCTGAAATCTGAAACTTCTGAAAGTCTCTGAAACAATGGTTCTGAAAAGTGAGCTCTGAAATTCTGAAATCAGCTATCTGAAAGGCATAAAGTCTGAAATCTGAAACTCTGAAATTCTGAAATTCTGAAAAATCTGAAATCTGAAATGGATCTGAAATGAGTCTGAAACTCTGAAAACTCCCGCTCTGAAATATTTTCTGAAATCTGAAATGATCTGAAACGTCTGAAAATCTGAAAGCTCTGAAAGTTTCTGAAACGCAGTTCTGAAATCCTCTGAAATCTGAAATCATCACCGTCTGAAATACTGTTCTGAAACTAGGTCTGAAAAATCTGAAATTGTACTCTGAAACACTCTGAAACACTCTGAAAAACTCTGAAATTCTGAAAATCTGAAATCTGAAATTTTATTCTGAAACTCCTCAGATGTCTGAAACAATGGCCAAACTTCTGAAACGGTCTGAAATTTCTGAAATCTGAAAGTTCTGAAAGTGGGGCTCTGAAAAATAATTCTGAAATCTGAAAGAGCATTCTGAAATCTGAAATCTGAAATCTGAAATCTGAAAGCAGTCTGAAAGTGTACTCTGAAATCTGAAATCTGAAATCTGAAAGAACTATGTCTGAAATCTGAAAATAAACATCTGAAATCTGAAACTCTGAAATCTGAAATCGTGTCTGAAAATCTGAAAAGTCTGAAAGAATCTGAAAAGGCTCTGAAACTCTGAAATCTGAAACATTGCGCTCTGAAAGTGTTCGGATATGTCTGAAATCTGAAATCAGTGTCTGAAAACTTCTGAAATAAATCTGAAACGTTCTGAAATTATCTACTCTGAAA','TCTGAAATC'))
# print(PatternCount('CGCGATACGTTACATACATGATAGACCGCGCGCGATCATATCGCGATTATC','CGCG'))

def FrequentWords(Text, k):
        FrequentPatterns = []
        Count = []
        itr = len(Text) - int(k)
        for i in range(itr):
            Pattern = Text[i:i+k]
            Count.append(PatternCount(Text, Pattern))
        maxCount = max(Count)
        for i in range (itr):
            if Count[i] == maxCount:
                FrequentPatterns.append(Text[i: i+k])
        FrequentPatterns = list(dict.fromkeys(FrequentPatterns))
        return FrequentPatterns

# print(FrequentWords('ACTGACTCCCACCCC',3))
# print(FrequentWords('ACGTTGCATGTCGCATGATGCATGAGAGCT',4))
# print(FrequentWords('CTTCAGACTTCAGACTTCAGAAAATCATACGCTGCCCACACAGAAGATATGCGGGATATGCGGGAAATCATACCTTCAGAGCTGCCCGCTGCCCACACAGAAGACACAGAAGGCTGCCCGCTGCCCAAATCATACAAATCATACAAATCATACGCTGCCCATATGCGGGACACAGAAGACACAGAAGGCTGCCCCTTCAGAATATGCGGGAAATCATACCTTCAGAACACAGAAGCTTCAGAGCTGCCCACACAGAAGAAATCATACCTTCAGAGCTGCCCATATGCGGGGCTGCCCGCTGCCCAAATCATACAAATCATACAAATCATACGCTGCCCAAATCATACGCTGCCCGCTGCCCAAATCATACACACAGAAGCTTCAGAGCTGCCCATATGCGGGGCTGCCCATATGCGGGATATGCGGGACACAGAAGAAATCATACATATGCGGGGCTGCCCCTTCAGAAAATCATACATATGCGGGACACAGAAGACACAGAAGATATGCGGGACACAGAAGCTTCAGAATATGCGGGACACAGAAGGCTGCCCATATGCGGGCTTCAGAATATGCGGGACACAGAAGATATGCGGGGCTGCCCCTTCAGAACACAGAAGCTTCAGACTTCAGAGCTGCCCATATGCGGGATATGCGGGCTTCAGACTTCAGAACACAGAAGCTTCAGACTTCAGACTTCAGACTTCAGAACACAGAAGACACAGAAGGCTGCCCATATGCGGGGCTGCCCGCTGCCCATATGCGGGGCTGCCCAAATCATACACACAGAAGACACAGAAGGCTGCCCGCTGCCCCTTCAGACTTCAGAAAATCATACCTTCAGAGCTGCCCATATGCGGGACACAGAAG',14))
# print(FrequentWords('TAAACGTGAGAGAAACGTGCTGATTACACTTGTTCGTGTGGTAT',3))

def RevComp(text):

  dict = {"A": "T", "C": "G", "G": "C", "T": "A"}
  reverseArray = []
  for i, nt in enumerate(text[::-1]):
    reverseArray.append(dict[nt])

  reverseComp = ''.join(reverseArray)
  return reverseComp

# print(RevComp('AAAACCCGGT'))
# print(RevComp('GCTAGCT'))


def PatternStart(Pattern, Text):
  starts = []
  itr = len(Text) - len(Pattern) + 1
  for i in range(itr):
    if Text[i: i+len(Pattern)] == Pattern:
      starts.append(str(i)) 
  return ' '.join(starts)

# print(PatternStart('ATAT','GATATATGCATATACTT'))
# print(PatternStart('ATA','ATATATA'))

def PatternToNumber(pattern):
  dict = {"A": 0, "C": 1, "G": 2, "T": 3}
  number = 0;
  
  for i, val in enumerate(pattern[::-1]):
    number += dict[val] * (4**i)

  return number

# print(PatternToNumber('ATGCAA'))
# print(PatternToNumber('CCCAAGCACCACGTCGCATA'))

def NumberToPattern(number, length):
  if length == 1:
    return number
  numAry = []
  dict = {0: "A", 1:"C", 2:"G", 3:"T"}
  
  for i in range (length):
    numAry.append(dict[number%4])
    number = number//4

  pattern = ''.join(numAry)[::-1]
  return pattern

# print(NumberToPattern(5437, 7))
# print(NumberToPattern(5437, 8))
# print(NumberToPattern(8930, 7))

def ComputingFrequencies(Text, k):
  FrequencyArray = []
  for i in range (4**k):
    FrequencyArray.append(0)
  for i in range (len(Text) - k+1):
    Pattern = Text[i:i+k]
    j = PatternToNumber(Pattern)
    FrequencyArray[j] = FrequencyArray[j] + 1
  
  return FrequencyArray

# print(ComputingFrequencies('ACGCGGCTCTGAAA',2))
# print(ComputingFrequencies('GGACATCTCCGAAGATGAGAGTACGGCGAGTTCACCCCATGCATCTGATACGTAAGTACACTTCGCTAGTGCTCATCACGTGGTAGTAAGGGATCGATACTTAACTCGGGTCCGAGGTTCATCAACGAGCGCTTAGTTATAAGAGGTTCGGCTACCGCGCATCCCTTCCGCTCTCCGCGGGGTGAAACTGTCGCTTATTTACTCGTGTTATCGGGTGGTAGCATGCGTTTGTCTAGGTAAGATCTAAATTATTTCCTATTAGGTAGAAGATTCATGAAGACCTAGTCTCACCATGGGGGGTTCATATTACTTCGGGCCCTCTGAAGAATCCACAGCTAAGGGTTACCATGGCGAGGGATTTCCAGCATGCAATAGGTAACGCCGGCATCTAAAGAAGATAAGAGACTCGCGCGTTCGCGCGTGGATGCGAGTGTCATTACAGGGGGATCGGATTATTTATGATGGACATGTACCAAACAGGAACTGATGGGACGAGGTATAGGACCTATCGTGTCTGCCCAAGGCATAAGCAGTGAGCCACCCTGATCAACGCAATCGCGTATCGAGATGGCTCAGTACGCACACAACTTCCAGTACAGAGGTCGTCAGTTGTAATGTGGAATTGAAAAAGGATTAGACGGTGAGCCATTACGTAAATGGTGCGTTCTACCCGGACGACGGTTTTCGGCGTTTAGCTTAGCATTGTACAGTTTCCTAGTCGACTACGTTCTCGGACCATCCCGCCGCGTCAGAAGGGACGAAAGATGCGTACCGGGTTGCT',6))

def FasterFrequentWords(Text, k):
  FrequentPatterns = []
  FrequencyArray = ComputingFrequencies(Text, k)
  maxCount = max(FrequencyArray)
  for i in range (4**k):
    if FrequencyArray[i] == maxCount:
      Pattern = NumberToPattern(i, k)
      FrequentPatterns.append(Pattern)
  return FrequentPatterns

# print(FasterFrequentWords('GGACATCTCCGAAGATGAGAGTACGGCGAGTTCACCCCATGCATCTGATACGTAAGTACACTTCGCTAGTGCTCATCACGTGGTAGTAAGGGATCGATACTTAACTCGGGTCCGAGGTTCATCAACGAGCGCTTAGTTATAAGAGGTTCGGCTACCGCGCATCCCTTCCGCTCTCCGCGGGGTGAAACTGTCGCTTATTTACTCGTGTTATCGGGTGGTAGCATGCGTTTGTCTAGGTAAGATCTAAATTATTTCCTATTAGGTAGAAGATTCATGAAGACCTAGTCTCACCATGGGGGGTTCATATTACTTCGGGCCCTCTGAAGAATCCACAGCTAAGGGTTACCATGGCGAGGGATTTCCAGCATGCAATAGGTAACGCCGGCATCTAAAGAAGATAAGAGACTCGCGCGTTCGCGCGTGGATGCGAGTGTCATTACAGGGGGATCGGATTATTTATGATGGACATGTACCAAACAGGAACTGATGGGACGAGGTATAGGACCTATCGTGTCTGCCCAAGGCATAAGCAGTGAGCCACCCTGATCAACGCAATCGCGTATCGAGATGGCTCAGTACGCACACAACTTCCAGTACAGAGGTCGTCAGTTGTAATGTGGAATTGAAAAAGGATTAGACGGTGAGCCATTACGTAAATGGTGCGTTCTACCCGGACGACGGTTTTCGGCGTTTAGCTTAGCATTGTACAGTTTCCTAGTCGACTACGTTCTCGGACCATCCCGCCGCGTCAGAAGGGACGAAAGATGCGTACCGGGTTGCT',6))

def FindingFrequentWordsBySorting(Text , k):
  FrequentPatterns = []
  Index = []
  Count = []

  for i in range(len(Text) - k+1):
    Pattern = Text[i: i+k]
    Index.append(PatternToNumber(Pattern))
    Count.append(1)
  
  SortedIndex = sorted(Index)
  
  for i in range(1, len(Text)- k+1):
    if SortedIndex[i] == SortedIndex[i - 1]:
      Count[i] = Count[i - 1] + 1

  maxCount = max(Count)
  for i in range(len(Text) - k+1):
    if Count[i] == maxCount:
      Pattern = NumberToPattern(SortedIndex[i], k)
      FrequentPatterns.append(Pattern)

  return FrequentPatterns
  

# print(FindingFrequentWordsBySorting('AAGCAAAGGTGGG', 2))

def BetterClumpFinding(Genome, k, L, t):
  FrequentPatterns = []
  Clump = []
  for i in range(4**k):
      Clump.append(0)
  Text = Genome[0:L]
  FrequencyArray = ComputingFrequencies(Text, k)
  for i in range(4**k):
      if FrequencyArray[i] >= t:
          Clump[i] = 1
  for i in range(len(Genome) - L):
      FirstPattern = Genome[i: k+i]
      index = PatternToNumber(FirstPattern)
      FrequencyArray[index] = FrequencyArray[index] - 1
      LastPattern = Genome[L - k + i: L + i]
      index = PatternToNumber(LastPattern)
      FrequencyArray[index] = FrequencyArray[index] + 1
      if FrequencyArray[index] >= t:
          Clump[index] = 1
  for i in range(4**k):
      if Clump[i] == 1:
          Pattern = NumberToPattern(i, k)
          FrequentPatterns.append(Pattern)
  return FrequentPatterns

# print(BetterClumpFinding('CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA', 5, 50, 4))